q.  https://www.interviewbit.com/problems/palindrome-partitioning-ii/


soln : 
int ispalindrome(string &str,int i,int j)
{ //int j=str.length()-1;
    //int i=0;
    while(i<j)
    {
        if(str[i]==str[j])
        {
            i++;j--;
        }
        else 
        return 0;
    }
    
    return 1;
    
    
    
    
}
int dp[501][501];
int solve(string &str,int i,int j)
{
    if(dp[i][j]!=-1)return  dp[i][j]; 
    if(i>=j || ispalindrome(str,i,j))
    {
        dp[i][j]=0;
        return 0;
    }
    
    
    
    int k=0;
    int ans=INT_MAX;
    int temp=0;
    for(k=i;k<j;k++)
    {
        temp=solve(str,i,k)+ solve(str,k+1,j)+1;
        ans=min(temp,ans);
        
        
        
    }
    dp[i][j]=ans;
    return dp[i][j];
    
}





int Solution::minCut(string str) {
    
    

     int l=str.length()-1;
        memset(dp,-1,sizeof(dp));
        return solve(str,0,l);
    

    
}
