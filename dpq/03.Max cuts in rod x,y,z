q. 

recursion  https://www.includehelp.com/icp/maximize-the-cut-segments.aspx#:~:text=3%2C%202%20respectively.-,To%20get%20maximum%20cuts%20we%20would%20cut%20in%20segments%20of,problem%20can%20be%20solved%20recursively.&text=You%20can%20check%20for%20example,divisible%20by%20minimum%20segment%20length. :
 . int max(int a,int b,int c)
{ int temp=c;
    if(a>b)
{
    if(a>c)temp=a;
    
}
else if(b>c)
temp=b;
return temp;
    
}



class Solution
{
    public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    { 
        if(n<0)return 0;
     if(n==0)
     return 0;
    if(n>0) return (1+ max(maximizeTheCuts(n-x,x,y,z),maximizeTheCuts(n-y,x,y,z),maximizeTheCuts(n-z,x,y,z)));
     

     
         
    }
};



soln2: memotization : 

class Solution
{
    
 int max(int a,int b,int c)
{ int temp=c;
    if(a>b)
{
    if(a>c)temp=a;
    
}
else if(b>c)
temp=b;
return temp;
    
}
int ans( int n,int x,int y,int z,int *dp  )
    {
        
          if(n==0)return 0;
          else if(n<0)return INT_MIN;
          if(dp[n]!=-1)
          {
              return dp[n];
              
          }
          
          dp[n]= 1+ max( ans(n-x,x,y,z,dp),ans(n-y,x,y,z,dp),ans(n-z,x,y,z,dp) );
          return dp[n];
        
        
        
    }
    
    
    
    public:
    //Function to find the maximum number of cuts.
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        int dp[n+1];
        memset(dp,-1,sizeof(dp));
        int a=ans(n,x,y,z,dp);
        if(a<0)return 0;
        return a;
        
    }
};




soln3: dp 
