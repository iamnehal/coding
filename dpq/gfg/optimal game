q: https://practice.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1#
soln: https://www.youtube.com/watch?v=AVQednPx5t8&ab_channel=CodingDoor


long long int  dp[1001][1001];
long long solve(int a[],int i,int j)
{
    if(i>j)
    {
        return dp[i][j]=0;
    }
    
    
   
    if(dp[i][j]!=-1)return dp[i][j];
    
    long long int takeff=solve(a,i+2,j);
     long long int takefl=solve(a,i+1,j-1);
     long long int takesf=solve(a,i+1,j-1);
     long long int takesl=solve(a,i,j-2);
    
    long long int takefirst=a[i]+ min(takeff,takefl);
    
    
    long long int takesecond=a[j]+ min(takesf,takesl);
    
    
    dp[i][j]=max(takefirst,takesecond);
    return dp[i][j];
    
}

//Function to find the maximum possible amount of money we can win.
long long maximumAmount(int arr[], int n) 
{
    memset(dp,-1,sizeof(dp));
    return solve(arr,0,n-1);
    
    
}
