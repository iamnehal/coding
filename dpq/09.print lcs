q. https://www.hackerrank.com/challenges/dynamic-programming-classics-the-longest-common-subsequence/problem

vector<int> longestCommonSubsequence(vector<int> a, vector<int> b) {
    
    int i,j;
    int m=a.size();
    int n=b.size();
    int dp[m+1][n+1];
    for(i=0;i<=m;i++)
    {
        for(j=0;j<=n;j++)
        {
            if(i==0||j==0)
            dp[i][j]=0;
        }
    }
    
    vector<int>v;
    unordered_set <int> intset ;
    for(i=1;i<=m;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(a[i-1]==b[j-1])
            {
                dp[i][j]=1+dp[i-1][j-1];
                
                
            }
            else {
            dp[i][j]=max( dp[i-1][j],dp[i][j-1]  );
            
            
            }
            
            
        }
    }
    
    i=m;j=n;
    
        while(i>0 && j>0)
        {
            
            if(a[i-1]==b[j-1])
            {
                
                v.push_back(a[i-1]);
                i--;j--;
                
            }
            else
            {
                if(dp[i-1][j]>dp[i][j-1])
                {
                    i--;
                }
                else
                j--;
            }
            
        }
      
     
        
        reverse(v.begin(),v.end());
        return v;
        

}
