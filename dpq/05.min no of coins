q.  https://leetcode.com/problems/coin-change/submissions/


soln1: aditya verma one: double array 
class Solution {
public:
    int coinChange(vector<int>& coins, int sum) {
        
      
        int n=coins.size();
    int dp[n+1][sum+1];
        
    int i,j;
        for(i=0;i<=n;i++)
        {
            for(j=0;j<=sum;j++)
            {
                
                
                if(i==0)dp[i][j]=INT_MAX-1;
            if(j==0)dp[i][j]=0;
                
                
            }
        }
        
       /* for(i=1,j=1;j<=sum;j++)
        {
            if(sum%coins[0]==0)dp[i][j]=sum/coins[0];
            else
                dp[i][j]=INT_MAX-1;
        }
        */
        
    
        
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=sum;j++)
            {
                
                if(j<coins[i-1])
                {
                    dp[i][j]=dp[i-1][j];
                }
                
                else
                {
                    dp[i][j]=min(  dp[i-1][j] ,1+dp[i][j-coins[i-1]]         );
                }
                
                
                
            }
        }
        
        if(dp[n][sum]==INT_MAX-1)return -1;
        return dp[n][sum];
        
    }
};



soln2: recursion +memorization

