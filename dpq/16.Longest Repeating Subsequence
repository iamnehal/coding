q: 
soln:
class Solution {
	public:
		int LongestRepeatingSubsequence(string s1){
		    int x=s1.length();
		    int y=x;
		    string s2=s1;
		    int dp[x+1][y+1];
    
    int ans=0;
int i,j;
for(i=0;i<=x;i++)
{
    for(j=0;j<=y;j++)
    {
        if(i==0||j==0)dp[i][j]=0;
    }
}
for(i=1;i<=x;i++)
{
    for(j=1;j<=y;j++)
    {
    {
        if(s1[i-1]==s2[j-1] && i!=j )
        {
            dp[i][j]=1+dp[i-1][j-1];
           // ans=max(ans,dp[i][j]);
            
        }
        else
        {
            dp[i][j]=max( dp[i-1][j],dp[i][j-1]);
            
        }
        
        
        
    }
    }
}

	return dp[x][y];	    
		    
		}

};



****************** for printing

string res = "";

	// Traverse dp[][] from bottom right
	int i = n, j = n;
	while (i > 0 && j > 0)
	{
		// If this cell is same as diagonally
		// adjacent cell just above it, then
		// same characters are present at
		// str[i-1] and str[j-1]. Append any
		// of them to result.
		if (str[i-1]==str[j-1] && i!=j)
		{
		res = res + str[i-1];
		i--;
		j--;
		}

		// Otherwise we move to the side
		// that that gave us maximum result
		else if (dp[i-1][j]>dp[i][j-1])
			i--;
		else
			j--;
	}

	// Since we traverse dp[][] from bottom,
	// we get result in reverse order.
	reverse(res.begin(), res.end());

	return res;
