q: 
bool isvalid(vector<vector<int>>&dist,vector<vector<int>>&grid,int x,int y,int m,int n)
{
 //yaha check kie ki khali hai ,rotten hai to false
 //or fresh orange hai par iska distance -1 nahi hai matlab visit ho chuka
 //visit ho gya to iska distance dubara nahi dallenge
 
if(x<0 || x>=m||y<0||y>=n)return false;
if(dist[x][y]==-1 || dist[x][y]==0)return false;
if(grid[x][y]==1 && dist[x][y]!=INT_MAX-1)return false;

//if(vis[x][y]==1)return false;

return true;



}
 
 
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
    

    
    int dx[4]={-1,1,0,0};
    int dy[4]={0,0,1,-1};
    
    int m=grid.size();
    int n=grid[0].size();
    queue<pair<int,int>>q;
     vector<vector<int>>dist(m,vector<int>(n,INT_MAX-1)); //starting main sb intmax -1 time lia
    
    int i,j;
    int count=0;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(grid[i][j]==2)
            {
                q.push(make_pair(i,j));
                dist[i][j]=0; //jo rotten unka time ko maine 0 kia
            
                count++;
                
            }
            if(grid[i][j]==0)dist[i][j]=-1;
 //jo khali hai unka time ko -1 kia            
        }
    }
    
    if(count==0)return -1;   //ek bhi rotten nahi hai to yahi pe return 
    
    while(q.empty()==0) 
    {
        int tx=q.front().first;
        int ty=q.front().second;
       
        q.pop();
        for(i=0;i<4;i++)
        {
            int x=tx+dx[i];
            int y=ty+dy[i];
            
            
            if(isvalid(dist,grid,x,y,m,n))
            {
                
            
            
                q.push(make_pair(x,y));
                
                dist[x][y]=dist[tx][ty]+1;// yaha min(dist[tx)[ty],dist[x][y] bhi kar skte the par
                //bfs hmesha minimum distance nikalta harr jagah se karke issiliye nahi kie
                
            }
            
            
            
        } //if(count1==0&&grid[tx][ty]==3)return -1;
        //count1=0;
        
        
        
    }
    
    int ans=-1;
     for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
          
         if(grid[i][j]==1)
         {ans=max(ans,dist[i][j]);
          
         }
          
        }
        }
    if(ans==INT_MAX-1)return -1;
    
    
    return ans;
    
    
    }
};
