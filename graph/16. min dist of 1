  
	    int dx[4]={-1,0,1,0 };
int dy[4]={0,1,0,-1};

bool isvalid(vector<vector<int>>&grid,int x,int y,int m,int n)
{

if(x<0 || x>=m||y<0||y>=n)return false;
if(grid[x][y]==1)return false;

//if(vis[x][y]==1)return false;

return true;



}



class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>&grid)
	{
	   int m=grid.size();
	   int n=grid[0].size();
	   
	   
	   //vector<vector<int>> v(m,vector<int>(n,0));
	    vector<vector<int>>dist(m,vector<int>(n,INT_MAX-1));
	

queue<pair<int,int>>q;
int i,j;
for(i=0;i<m;i++)
{
    for(j=0;j<n;j++)
    {
        if(grid[i][j]==1)
        {
            dist[i][j]=0;
            q.push(make_pair(i,j));
        }
        
    }
}

while(!q.empty())
{ int tx=q.front().first;
int ty=q.front().second;

int d=dist[tx][ty];

q.pop();

for(i=0;i<4;i++)
{
    int x=tx+dx[i];
    int y=ty+dy[i];
    
    if(isvalid(grid,x,y,m,n))
    {
        
        dist[x][y]=min(dist[x][y],d+1);
        grid[tx][ty]=1;
        q.push(make_pair(x,y));
    }
    
    
}
    
    
}

	return dist;
	   
	}
};
