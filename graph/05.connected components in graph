https://code.hackerearth.com/problem/algorithm/connected-components-in-a-graph/
utube pe soln mil jaega 
bfs soln: 
#include <bits/stdc++.h>
using namespace std;

void bfs(vector<int> a[],bool *vis,queue<int> q,int node)
{ q.push(node);
//vis[node]=1;

while(q.empty()==0)
{ node=q.front();
q.pop();

for(auto x:a[node])
{ if(vis[x]==0)
{vis[x]=1;
    q.push(x);

}


}
}return;


}

int main()
{
    int n,e;
    cin>>n>>e;
    vector<int> a[n+1];
    for(int i=0;i<e;i++)
    {
        int u,v;
        cin>>u>>v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
bool vis[n+1]={0};
int count=0;
queue<int>q;

    for(int i=1;i<=n;i++)
    { if(vis[i]==0)
    { count++;
        bfs(a,vis,q,i);
    }
    }
    cout<<count;
return 0;
    }

    
*****************************************************
DFS SOLN:




#include <bits/stdc++.h>
using namespace std;

void dfs(vector<int>v[],bool *vis,int s)
{


    vis[s]=true;
    for(int i=0;i<v[s].size();i++)
    { int temp=v[s][i];
        
        
        if(vis[temp]==false)
       { dfs(v,vis,temp);}

    }
}


int solve( vector<int> a[],int n)
{ bool vis[n+1]={false};
int count=0;
for(int i=1;i<=n;i++)
{
    if(vis[i]==false)
    {
           dfs(a,vis,i);
           count++;
        
    }
}

return count;


}



int main()
{

int n,e;
cin>>n>>e;
vector<int> a[n+1];
for(int i=1;i<=e;i++)
{
int u,v;
cin>>u>>v;


a[u].push_back(v);
a[v].push_back(u);


}

int ans=solve(a,n);
cout<<ans<<endl;
return 0;


}
