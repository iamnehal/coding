https://leetcode.com/problems/number-of-islands/submissions/ 
video soln:  utube   this concept is basically a type of dfs where we mark all neighbours



class Solution {
public:
    
    void markislands(vector<vector<char>> &grid,int i,int j)
    {
        if(i<0 || i>=grid.size()||j<0 || j>=grid[i].size()||grid[i][j]=='0')return ;
        
        grid[i][j]='0';//this is to mark i have visited ... here i can also create a 2d booloean
        //array and mark in them 
        
        //now we call our function on its neigbours
        
        markislands(grid,i-1,j);
        markislands(grid,i,j-1);
        markislands(grid,i+1,j);
        markislands(grid,i,j+1);
        //here i can't go diagonally else there would be 8 cases i-1 j-1,i+1 j etc too 
        return ;
        
        
    }
    
    
    int numIslands(vector<vector<char>>& grid) {
        
        
        int m=grid.size();
        
        if(m==0)return 0;
        
        int n=grid[0].size();
        int i,j;
        int count=0;
        int noi=0;
        
        for(i=0;i<grid.size();i++)
        {
            
            
            for(j=0;j<grid[i].size();j++) //here we could mark grid[0].size also
                //but we have done this so that when unequal grid which doesn't have same columns 
                //for every row then we could access them also.. this is general code
            {
                
                if(grid[i][j]=='1')
                {
                    noi++;
                    markislands(grid,i,j);
                }
                
            }
        }
        return noi;
        
        
        
        
    }
};
