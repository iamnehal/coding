https://practice.geeksforgeeks.org/problems/bfs-traversal-of-graph/1      
This is for conneected graph won't get accepted

	vector<int>bfsOfGraph(int n, vector<int> a[]){
	    
	    bool v[n];
queue<int> q;
vector<int> ans;
q.push(0); int cur=0;
while(!q.empty())
{
cur=q.front();
q.pop();
ans.push_back(cur);
for(int i=0;i<a[cur].size();i++)
{
    if(!(v[a[cur][i]]))
    {
q.push(a[cur][i]);
v[a[cur][i]]=true;
    }
}

}
return ans;


	    
	}



for disconnected graph also   : read article here https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/   
go down and see modifed version vaisa hoga 

class Solution
{
    public:
    //Function to return Breadth First Traversal of given graph.
	vector<int>bfsOfGraph(int V, vector<int> a[])
	{
	    
	  
	        
	    
	    bool v[V];
queue<int> q;
vector<int> ans;
  for(int i=0;i<V;i++)
	    {

if(v[i]==0)
{
    q.push(i); int cur=0;



while(!q.empty())
{
cur=q.front();
q.pop();
ans.push_back(cur);
for(int i=0;i<a[cur].size();i++)
{
    if(!(v[a[cur][i]]))
    {
q.push(a[cur][i]);
v[a[cur][i]]=true;
    }
}

}
}
return ans;

	    
	    }
	}
};



// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
    public:
    //Function to return Breadth First Traversal of given graph.
	vector<int>bfsOfGraph(int V, vector<int> a[])
	{
	   vector<int>vis(V,0);
	   
	   
	   queue<int>q;
	   int curr=0;
	   vector<int>ans;
	   
	 
	   
	  
	       
	        
	   vis[0]=1;
	   
	   q.push(0);
	   while(q.empty()==0)
	   {   
	       curr=q.front();
	       q.pop();
	       ans.push_back(curr);
	       for(auto x:a[curr])
	       {
	         if( vis[x]==0) 
	         {
   
   vis[x]=1;
   q.push(x);

	               
	               
	               
	           }
	           
	           
	           
	           
	       }
	   }
	       
	       
	       
	       
	       
	       
	       
	       
	       
	       
	   
	   
	   
	   
	   
	   return ans;
	   
	   
	   
	   
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    // 		adj[v].push_back(u);
    	}
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int>ans=obj.bfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
        	cout<<ans[i]<<" ";
        }
        cout<<endl;
	}
	return 0;
}  // } Driver Code Ends
