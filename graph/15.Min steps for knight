


bool isvalid(vector<vector<int>> &vis,int x,int y,int N)
{

if(x<1 ||y<1 || x>N||y>N)return false;

if(vis[x][y]==1)return false;

return true;



}



class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{ int x=KnightPos[0];
	int y=KnightPos[1];
	 
int dx[8]={-1,-1,1,1,2,2,-2,-2};
int dy[8]={2,-2,2,-2,1,-1,1,-1}; 
	 vector<vector<int>>dist(N+1,vector<int>(N+1,0));
	 vector<vector<int>> vis (N+1,vector<int>(N+1,0));
	    
	    
	   queue<pair<int,int>>q;
 
 q.push(make_pair(x,y));

  dist[x][y]=0;
  vis[x][y]=1;

   while(q.empty()==0)
   {
      int tx=q.front().first;
      int ty=q.front().second;
      int d=dist[tx][ty];
      
      q.pop();

      for(int i=0;i<8;i++)
      {

         int newx=tx+dx[i];
         int newy=ty+dy[i];
 if(isvalid(vis,newx,newy,N))
 {
    dist[newx][newy]=d+1;
    vis[newx][newy]=1;
    q.push(make_pair(newx,newy));


 }

      }



   }
   
   int endx=TargetPos[0];
   int endy=TargetPos[1];
   return dist[endx][endy];
	   
	   
	   
	   
	   
	}
};
