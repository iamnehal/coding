
bool dfs(vector<int> a[],stack<int> &s,bool *vis,int index)
{
    vis[index]=1;
    for(auto x:a[index])
    {
        if(vis[x]==0)
        {
            dfs(a,s,vis,x);
            
        }
        
        
    }
    s.push(index);
    
    
    
}

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	   
	   stack<int> s;
	   bool vis[V]={0};
	   int i=0;
	   for(i=0;i<V;i++)
	   {
	       if(vis[i]==0)
	       {
	           dfs(adj,s,vis,i);
	       }
	       
	   }
	   vector<int>ans;
	   while(s.empty()==0)
	   {
	       ans.push_back(s.top());
	       s.pop();
	       
	   }
	 return ans;  
	}
};


********************************************
int dfs(vector<int> adj[],vector<int>&ans,int node,vector<int>&vis)
{
     vis[node]=1;
     
    
    for(auto x:adj[node])
{
    if(vis[x]==0)
    {
        dfs(adj,ans,x,vis);
        
    }
    
    
}
ans.push_back(node);


}

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{vector<int>vis(V,0);
	vector<int>ans;
	
	
	    int i;
	    for(i=0;i<V;i++)
	    {
	
	if(vis[i]==0)
	{
	    dfs(adj,ans,i,vis);
	    
	    
	}
	        
	        
	    }
	    reverse(ans.begin(),ans.end());
	    return ans;
	    
	    
	    
	    
	    // code here
	}
};
