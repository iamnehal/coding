
class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        if(head==NULL||head->next==NULL)return head;
        
        struct node* prv;
        struct node* curr;
        struct node* next;
        prv=NULL;
        curr=head;
        
        int count=0;
        while(curr!=NULL && count<k)
        {
            next=curr->next;
            curr->next=prv;
    prv=curr;
    curr=next;
            count++;
            
            
        }
        head->next=reverse(next,k);
        return prv;
        
        
        
    }
};
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode* head,int k,int counter)
    {if(counter==0)return head;
        
        
        if(head==NULL || head->next==NULL)
            return head;
        ListNode* prv=NULL;
        ListNode* curr=head;
        
        ListNode* next;
        int count=0;
        while(curr && count<k)
        {
            
            
            next=curr->next;
            curr->next=prv;
            prv=curr;
            curr=next;
            
            count++;
            
            
        }
        head->next=reverse(next,k,counter-1);
        return prv;
        
        
    }
    
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        int length=0;
        ListNode* temp=head;
        while(temp){
            length++;
            temp=temp->next;
            
        }
        
        
        
        int counter= length/k;
        return reverse(head,k,counter);
        
    }
};
